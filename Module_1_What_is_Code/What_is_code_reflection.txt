Module 1: What is code? Reading and reflection. 
Objective: To read and reflect on the nature of code and 
creation through digitized data and software . 
Read Article: 
https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/ 
Answer the following questions in a .txt file saved as: What_is_code_reflection
 
1. In your own words, what is a computer really doing whenever you type a letter on a keyboard? (150 words max) 
	Before reading this article, I imagined something sort of a typewriter inside the computer that would display the letter being typed the way it used to be done before computers were invented. It now sounds silly to think like that specially having into account that the computer has to figure out a way to construct and display words. In reality, the keyboard is constantly scanning to see which letter gets pressed or activated. Each letter has a unique code that is generated every time the key is pressed down. That code is passed to a program that translated it for the computer to understand what letter needs to be displayed. Each letter is stored in the memory with a unique code that only gets run when the keyboard received its signal. 

2. In your own words, how do computers use input and output to create experiences? (250 words max) 
	Even though I think subconsciously we know that a computer is only a machine and has no way of actually having a conversation with us, we still crave "human interaction." Although a lot of things have switched online such as online shopping, we still want to feel as if there is someone helping us through our shopping. By having an input and output feature, a user is able to communicate with the computer and the computer is able to fake talking and/or listening. I find that something as simple as a website welcoming me by name gives me a sense of comfort. When I started learning python and the input() function was introduced, it was great to see that I could create a variable to hold the user's input and then print a string that contained a message plus the user's input. I am certain that this interaction certainly create a more pleasant experience for the user and makes certain platforms more successful than others. For instance, the virtual bank assistant in my Bank of America app makes me feel as if someone is actually chatting with me live, but I know that is not the case. Still the input and output makes a computer come to life. 

3. Explain why software products are essentially “infinitely reproducible nothings.” (150 words 
max)	
	In the article, the author refers to software products as “infinitely reproducible nothings” because software products are not a physical product that requires a lot of physical resources to be built and thus aren't tangible. Physical products that are in the market are costly to produce thus the margins to sell them aren't high. But if a product can be infinitely copied and reproduced, then the margins are great. However, when there is more competition and some people start offering similar software products then suddenly those "nothings" margin's get lower. They still have the advantage of being able infinitely reproducible but coders have to get more creative and improve their software to compete in an ever-changing technology driven world. 

4. Explain in your own words how code becomes software. (150 words max) 	When I think of code, I think of the raw product before is launched to the user. Is what is stored locally in a coder's git repo before being shared to the online world. This code has to be tested multiple times and organized and transform into a explicit set of instructions that can be passed through a compiler and transform into a lower level language that the computer can understand and then execute. Once this happens, then that code can be considered software and considered the end product which is what the user will be able to interact with.   

5. Explain “algorithms” in your own words. (150 words max)
	The way I understand algorithms is as an answer that will work to solve a hard problem. I think of an algorithm as a recipe that if follow correctly will work to perform a specific task. An algorithm is a set of instructions that can be repeated and will always solve a particular problem. 

6. Explain the DRY principle. (100 words max) 
	The DRY principle is a programming principle that all programers aim to achieve. It stands for "Don't repeat Yourself" and was born in the idea that a code should not be messy, the programmer should not have things like repeated functions and variables in their code. Everything should be done once only and let the computer repeat itself using the software and commands in a practical way. The author explains that this is something that is very hard to achieve and all programmers aim to achieve the perfect clean code.  

7. In your own words, what is object-oriented programming? (100 words max) 
	Object-oriented programming is based on the idea of encapsulating a particular object into a class and only modify it through functions. Each different object is separated from each other and this practice helps organize things and create libraries. Sort of being able to file things into its own cabinet and everything that belongs to that particular object is together with it. For example, we can encapsulate all the code that is related to a class called "carpenter." If these is a separate class called "doctor" it will not affect the class "carpenter." They will each exist in their independent capsule.  	
8. In your own words explain data and how it relates to code.(100 Words max) 
	Data are values that are collected about a person or object and anything that surrounds it. Like stated in the article, data comes from everwhere. A record of everything a person does from the time they wake up to the time they go to sleep and doing that everyday until we have a compilation. All that data can then be analyzed to identify a particular problem and use code to solve that problem. For instance, if data points to people want to keep track of their heart rate than code might be modified and aim to satisfy that need.  

9. What is a framework? (150 words max) 	A framework is sort of a predisposed structure to help programmers have a stating point and to make it easy for them to organize their codes so that they can focus more in the high level coding and let the framework focus in the low-level translation. This set of rules tell the programmer on the things that can and can't be done. Choosing the right framework can directly affect a particular product so is very important to choose the right one depending on how what type of application, network, web, etc is being built. 

10. What is debugging? (150 words max) 
	The way I think of debugging is fixing any glitches, taking things that aren't suppose to be in the code and are causing an error or adding things that will fix a particular issue. In the example that the article gives, I can understand how easily bugs can go unnoticed and how easily they can reproduce. Every time I fixed one, another one would appear and it felt like a vicious cycle. I'm sure in a bigger code it might be harder to find these bugs and expecting things to go wrong is part of writing that code so programmers probably spend more than half of their time debugging. 

11. Now, with more of an understanding of what code is, why do you want to learn how to code? (500 words max)
	The truth is that before I started learning how to code I convinced myself that I wouldn't be able to do it. Growing up in a small town, technology wasn't always accessible. Furthermore, anytime I was near a computer I would press something that made it crash or time out. Growing up, my family members labeled me as the "computer destroyer" and for the longest I truly believed I could not own my own computer because I would end up breaking it. A lot has changed since. I find coding mysterious, how it is everywhere but you can't see it unless you look for it. I think code combines everything and brings so many skills together such as math, analysis, creativity, communication. A coder is a versatile person prepared for unexpected things. I believe all of this skills will help me improve as a person. I want to enjoy my job and I want to be challenged everyday. Even if a problem is hard, I want to find the perfect algorithm that will solve it. Lastly, I really love data and how it is used to solve problems and create new products. Before I decided to become a data analyst, I considered working in the field of social statistics because I have always been interested in finding a way to help the community while analyzing large amounts of data. However after doing a few analysis using social methods I discovered that field wasn't going to be a great fit for me and it wasn't exciting to work with. When a friend that has known me for years suggested I would be a good data analyst I was intrigued. After doing some research as to what a data analyst does and what skills are needed I realized that it described a lot of the skills I have. The more I code the more I realize I really enjoy doing it. I might be stuck in a simple problem for days but it feels amazing when a concept clicks in my head so if the knowledge house is able to let me participate in the program, I will like to continue learning how to code.  

